// -*- C++ -*-
// Copyright (C) Dmitry Igrishin
// For conditions of distribution and use, see files LICENSE.txt or pgfe.hpp

#ifndef DMITIGR_PGFE_BASICS_HPP
#define DMITIGR_PGFE_BASICS_HPP

#include "dmitigr/pgfe/dll.hpp"

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file was generated automatically. Edit basics.hpp.in instead!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

namespace dmitigr::pgfe {

/**
 * @ingroup main
 *
 * @brief Represents a socket readiness.
 */
enum class Socket_readiness {
  /** Any I/O operation on a socket would block. */
  unready = @PGFE_SOCKET_READINESS_UNREADY@,

  /** Read operation on a socket would not block. */
  read_ready = @PGFE_SOCKET_READINESS_READ_READY@,

  /** Write operation on a socket would not block. */
  write_ready = @PGFE_SOCKET_READINESS_WRITE_READY@,

  /** Exceptions are available. */
  exceptions = @PGFE_SOCKET_READINESS_EXCEPTIONS@
};

/**
 * @ingroup main
 *
 * Bitwise AND for Socket_readiness.
 */
DMITIGR_PGFE_API Socket_readiness operator&(Socket_readiness lhs, Socket_readiness rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise OR for Socket_readiness.
 */
DMITIGR_PGFE_API Socket_readiness operator|(Socket_readiness lhs, Socket_readiness rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise XOR for Socket_readiness.
 */
DMITIGR_PGFE_API Socket_readiness operator^(Socket_readiness lhs, Socket_readiness rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise NOT for Socket_readiness.
 */
DMITIGR_PGFE_API Socket_readiness operator~(Socket_readiness lhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise AND for Socket_readiness with assignment to lvalue.
 */
DMITIGR_PGFE_API Socket_readiness& operator&=(Socket_readiness& lhs, Socket_readiness rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise OR for Socket_readiness with assignment to lvalue.
 */
DMITIGR_PGFE_API Socket_readiness& operator|=(Socket_readiness& lhs, Socket_readiness rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise XOR for Socket_readiness with assignment to lvalue.
 */
DMITIGR_PGFE_API Socket_readiness& operator^=(Socket_readiness& lhs, Socket_readiness rhs) noexcept;

// -----------------------------------------------------------------------------

/**
 * @ingroup main
 *
 * @brief Represents a client/server communication mode.
 */
enum class Communication_mode {
#ifndef _WIN32
  /** Denotes that Unix-domain sockets (UDS) is used for communication. */
  uds = @PGFE_COMMUNICATION_MODE_UDS@,
#endif

  /** Denotes that a network is used for communication. */
  net = @PGFE_COMMUNICATION_MODE_NET@
};

// -----------------------------------------------------------------------------

/**
 * @ingroup main
 *
 * @brief Represents a communication status.
 */
enum class Communication_status {
  /** Denotes a normally disconnected state. */
  disconnected = @PGFE_COMMUNICATION_STATUS_DISCONNECTED@,

  /** Denotes a disconnected state due to some kind of failure. */
  failure = @PGFE_COMMUNICATION_STATUS_FAILURE@,

  /**
   * Denotes connection establishment in progress state. (Need to poll the
   * socket until it becomes write-ready before continuing connection
   * establishment process.)
   */
  establishment_writing = @PGFE_COMMUNICATION_STATUS_ESTABLISHMENT_WRITING@,

  /**
   * Denotes connection establishment in progress state. (Need to poll the
   * socket until it becomes read-ready before continuing the connection
   * establishment process.)
   */
  establishment_reading = @PGFE_COMMUNICATION_STATUS_ESTABLISHMENT_READING@,

  /** Denotes the connected state. */
  connected = @PGFE_COMMUNICATION_STATUS_CONNECTED@
};

// -----------------------------------------------------------------------------

/**
 * @ingroup main
 *
 * @brief Represents the transaction block status.
 */
enum class Transaction_block_status {
  /**
   * Denotes that the next SQL command would be executed in
   * implicitly started transaction block and then implicitly committed.
   */
  unstarted = @PGFE_TRANSACTION_BLOCK_STATUS_UNSTARTED@,

  /**
   * Denotes that the next SQL command would be executed in
   * explicitly started and not yet committed transaction block.
   */
  uncommitted = @PGFE_TRANSACTION_BLOCK_STATUS_UNCOMMITTED@,

  /**
   * Denotes that the next SQL command would be rejected with
   * an error unless that command is a kind of ROLLBACK.
   */
  failed = @PGFE_TRANSACTION_BLOCK_STATUS_FAILED@
};

// -----------------------------------------------------------------------------

/**
 * @ingroup main
 *
 * @brief Represents a possible data format.
 */
enum class Data_format {
  /** Denotes the text format. */
  text = @PGFE_DATA_FORMAT_TEXT@,

  /** Denotes the binary format. */
  binary = @PGFE_DATA_FORMAT_BINARY@
};

// -----------------------------------------------------------------------------

/**
 * @ingroup main
 *
 * @brief Represents a problem info severity.
 */
enum class Problem_severity {
  /** Denotes "log" problem severity (may be only in dmitigr::pgfe::Notice). */
  log = @PGFE_PROBLEM_SEVERITY_LOG@,

  /** Denotes "info" problem severity (may be only in dmitigr::pgfe::Notice). */
  info = @PGFE_PROBLEM_SEVERITY_INFO@,

  /** Denotes "debug" problem severity (may be only in dmitigr::pgfe::Notice). */
  debug = @PGFE_PROBLEM_SEVERITY_DEBUG@,

  /** Denotes "notice" problem severity (may be only in dmitigr::pgfe::Notice). */
  notice = @PGFE_PROBLEM_SEVERITY_NOTICE@,

  /** Denotes "warning" problem severity (may be only in dmitigr::pgfe::Notice). */
  warning = @PGFE_PROBLEM_SEVERITY_WARNING@,

  /** Denotes "error" problem severity (may be only in dmitigr::pgfe::Error). */
  error = @PGFE_PROBLEM_SEVERITY_ERROR@,

  /** Denotes "fatal" problem severity (may be only in dmitigr::pgfe::Error). */
  fatal = @PGFE_PROBLEM_SEVERITY_FATAL@,

  /** Denotes "panic" problem severity (may be only in dmitigr::pgfe::Error). */
  panic = @PGFE_PROBLEM_SEVERITY_PANIC@
};

// -----------------------------------------------------------------------------

/**
 * @ingroup main
 *
 * @brief Represents an external library.
 */
enum class External_library {
  /** Denotes the OpenSSL library. */
  libssl = @PGFE_EXTERNAL_LIBRARY_LIBSSL@,

  /** Denotes the libcrypto library. */
  libcrypto = @PGFE_EXTERNAL_LIBRARY_LIBCRYPTO@
};

/**
 * @ingroup main
 *
 * Bitwise AND for External_library.
 */
DMITIGR_PGFE_API External_library operator&(External_library lhs, External_library rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise OR for External_library.
 */
DMITIGR_PGFE_API External_library operator|(External_library lhs, External_library rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise XOR for External_library.
 */
DMITIGR_PGFE_API External_library operator^(External_library lhs, External_library rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise NOT for External_library.
 */
DMITIGR_PGFE_API External_library operator~(External_library lhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise AND for External_library with assignment to lvalue.
 */
DMITIGR_PGFE_API External_library& operator&=(External_library& lhs, External_library rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise OR for External_library with assignment to lvalue.
 */
DMITIGR_PGFE_API External_library& operator|=(External_library& lhs, External_library rhs) noexcept;

/**
 * @ingroup main
 *
 * @brief Bitwise XOR for External_library with assignment to lvalue.
 */
DMITIGR_PGFE_API External_library& operator^=(External_library& lhs, External_library rhs) noexcept;

} // namespace dmitigr::pgfe

#ifdef DMITIGR_PGFE_HEADER_ONLY
#include "dmitigr/pgfe/basics.cpp"
#endif

#endif // DMITIGR_PGFE_BASICS_HPP
